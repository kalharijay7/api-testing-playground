{
	"info": {
		"_postman_id": "d1f2f9a1-367c-4280-acc4-724746ef9809",
		"name": "01 CRUD Operations - Reqres",
		"description": "Practicing REST API CRUD operations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10829026",
		"_collection_link": "https://www.postman.com/kalharijay/workspace/api-testing-playground/collection/10829026-d1f2f9a1-367c-4280-acc4-724746ef9809?action=share&source=collection_link&creator=10829026"
	},
	"item": [
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains users data\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.be.above(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains one user object\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    //Check if the main \"data\" object exists\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"    //Check if all keys in the object exist in user object\r",
							"    pm.expect(jsonData.data).to.have.all.keys(\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all parent properties\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.include.all.keys(\"data\", \"page\", \"per_page\", \"total\", \"total_pages\");\r",
							"})\r",
							"\r",
							"pm.test(\"Data property contains a list\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Data property contains all child properties\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0]).to.have.all.keys(\"id\", \"name\", \"year\", \"color\", \"pantone_value\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/page",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"page"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an Unknown Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains one resource object\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    //Check if the main \"data\" object exists\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"    //Check if all keys in the object exist in user object\r",
							"    pm.expect(jsonData.data).to.have.all.keys(\"id\", \"name\", \"year\", \"color\", \"pantone_value\")\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/page/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"page",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User Without API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function(){\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body shows unauthorized error\", function(){\r",
							"    try{\r",
							"        const responseData = pm.response.json();\r",
							"        pm.expect(responseData.error || responseData.message).to.be.oneOf([\"unauthorized\", \"Missing API Key\"]);\r",
							"    }\r",
							"    catch(e){\r",
							"        pm.expect(pm.response.text()).to.include(\"Missing API key\");\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User With API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status cod is 201\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"First name is updated correctly\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.first_name).to.equal(\"Ayod\");\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "reqres-free-v1",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"first_name\" : \"Ayod\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"10"
					]
				}
			},
			"response": []
		}
	]
}